openapi: 3.0.3
info:
  title: BNI Payment Authentication Service API
  description: |
    Authentication service API for user registration, login, token refresh, and logout operations.
    This service provides JWT-based authentication with access and refresh tokens.
  version: 1.0.0
  contact:
    name: BNI Payment Authentication Service
    email: support@bni.co.id
  license:
    name: Proprietary
    url: https://www.bni.co.id

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://kong-proxy-one-gate-payment.apps.ocp-one-gate-payment.skynux.fun
    description: Development server
  - url: https://kong-proxy-one-gate-payment.apps.ocp-one-gate-payment.skynux.fun
    description: Production server

tags:
  - name: Authentication
    description: User authentication operations
  - name: Payment
    description: E-wallet and payment operations
  - name: Transactions
    description: Historical transaction management

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: |
        Creates a new user account with unique username, email, and optional phone number.
        Password will be securely hashed before storage.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            examples:
              user_registration:
                summary: Example user registration with phone
                value:
                  email: "john.doe@example.com"
                  username: "johndoe"
                  phone: "081234567890"
                  password: "SecurePassword123!"
              user_registration_no_phone:
                summary: Example user registration without phone
                value:
                  email: "jane.smith@example.com"
                  username: "janesmith"
                  password: "SecurePassword123!"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: User email address
                        example: "john.doe@example.com"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username, email, or phone number already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflict:
                  summary: Username/email/phone conflict
                  value:
                    meta:
                      code: "409"
                      message: "username, email, or phone number already exists"
                    data: null
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: |
        Authenticate user with username/email/phone and password.
        Returns access token and refresh token upon successful authentication.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuth'
            examples:
              login_username:
                summary: Login with username
                value:
                  username: "john_doe"
                  password: "@Skywalker21"
              login_email:
                summary: Login with email
                value:
                  username: "john.doe@example.com"
                  password: "SecurePassword123!"
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    meta:
                      code: "401"
                      message: "invalid username, email, phone, or password"
                    data: null
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/refresh:
    put:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Generate a new access token using a valid refresh token.
        The refresh token must be valid and not expired.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
            examples:
              refresh_request:
                summary: Example refresh request
                value:
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_token:
                  summary: Invalid refresh token
                  value:
                    meta:
                      code: "401"
                      message: "token is invalid or expired"
                    data: null
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/logout:
    delete:
      tags:
        - Authentication
      summary: Logout user
      description: |
        Invalidate the refresh token and log out the user.
        The refresh token will be removed from the authentication store.
      operationId: logoutUser
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: refresh_token
          in: query
          required: true
          description: Refresh token to invalidate
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        example: "user logged out successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payment/account:
    get:
      tags:
        - Payment
      summary: Get user account details
      description: |
        Retrieve the authenticated user's account information including balance,
        currency, and account status.
      operationId: getAccount
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AccountResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payment/balance:
    get:
      tags:
        - Payment
      summary: Get e-wallet balance
      description: |
        Retrieve the current balance of the authenticated user's e-wallet.
      operationId: getBalance
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BalanceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payment/wallet:
    get:
      tags:
        - Payment
      summary: Get external e-wallet balance
      description: |
        Retrieve the current balance from external e-wallet providers like GoPay or ShopeePay.
        This endpoint connects to the external provider's API to get real-time balance information.
      operationId: getExternalBalance
      security:
        - BearerAuth: []
      parameters:
        - name: ewallet
          in: query
          required: true
          description: External e-wallet provider
          schema:
            type: string
            enum: [gopay, shopeepay]
          example: "gopay"
      responses:
        '200':
          description: External balance retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ExternalBalanceResponse'
        '400':
          description: Invalid e-wallet provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: E-wallet account not linked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: External service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payment/topup:
    post:
      tags:
        - Payment
      summary: Top up e-wallet balance
      description: |
        Add funds to the authenticated user's e-wallet using various payment methods.
        Creates a transaction record and updates the account balance.
      operationId: topupBalance
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopupRequest'
            examples:
              gopay_topup_different_phone:
                summary: Top up using GoPay with different phone
                value:
                  amount: 100000.00
                  payment_method: "GOPAY"
                  phone_number: "085987654321"
                  description: "Top up via GoPay from different account"
              shopeepay_topup:
                summary: Top up using ShopeePay with different phone
                value:
                  amount: 75000.00
                  payment_method: "SHOPEE_PAY"
                  phone_number: "081987654321"
                  description: "Top up via ShopeePay"
      responses:
        '201':
          description: Top up initiated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Invalid amount, payment method, or phone number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_amount:
                  summary: Invalid amount
                  value:
                    meta:
                      code: "422"
                      message: "amount must be greater than 0"
                    data: null
                missing_phone_ewallet:
                  summary: Missing phone for e-wallet payment
                  value:
                    meta:
                      code: "422"
                      message: "phone number is required for e-wallet payments"
                    data: null
                invalid_phone_format:
                  summary: Invalid phone number format
                  value:
                    meta:
                      code: "422"
                      message: "phone number must be in Indonesian format (081234567890)"
                    data: null
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /api/transactions:
    get:
      tags:
        - Transactions
      summary: Get user transaction history
      description: |
        Retrieve paginated list of user's historical transactions with optional filtering.
        This endpoint is for external services with API key authentication.
      operationId: getExternalTransactions
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: size
          in: query
          description: Number of transactions per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: type
          in: query
          description: Filter by transaction type
          required: false
          schema:
            type: string
            enum: [TOPUP, PAYMENT, REFUND, TRANSFER]
          example: "TOPUP"
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            type: string
            enum: [PENDING, SUCCESS, FAILED, CANCELLED]
          example: "SUCCESS"
        - name: from_date
          in: query
          description: Start date for transaction filter (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00Z"
        - name: to_date
          in: query
          description: End date for transaction filter (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-31T23:59:59Z"
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionPageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/transactions/{transaction_id}:
    get:
      tags:
        - Transactions
      summary: Get transaction details
      description: |
        Retrieve detailed information about a specific transaction by transaction ID.
      operationId: getTransactionById
      security:
        - ApiKeyAuth: []
      parameters:
        - name: transaction_id
          in: path
          description: Unique transaction identifier
          required: true
          schema:
            type: string
          example: "TXN-20240120-001"
      responses:
        '200':
          description: Transaction details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WebResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UserRegister:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          description: Valid email address
          example: "john.doe@example.com"
        username:
          type: string
          minLength: 1
          maxLength: 255
          description: Unique username
          example: "johndoe"
        phone:
          type: string
          maxLength: 20
          description: Phone number in Indonesian format (optional)
          example: "081234567890"
          pattern: '^08[0-9]{8,11}$'
        password:
          type: string
          minLength: 1
          maxLength: 255
          description: User password (will be hashed)
          example: "SecurePassword123!"

    UserAuth:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 255
          description: Username, email, or phone number for authentication
          example: "johndoe"
        password:
          type: string
          minLength: 1
          maxLength: 255
          description: User password
          example: "SecurePassword123!"

    TokenRefresh:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          minLength: 1
          description: Valid JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNjE2MjM5MDIyfQ..."
        refresh_token:
          type: string
          description: JWT refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNjE2MjM5MDIyfQ..."

    TokenResponse:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: New JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNjE2MjM5MDIyfQ..."

    MetaResponse:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: HTTP status code as string
          example: "200"
        message:
          type: string
          nullable: true
          description: Response message
          example: "Operation completed successfully"

    WebResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/MetaResponse'
        data:
          description: Response data (type varies by endpoint)
          nullable: true

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/WebResponse'
        - type: object
          properties:
            data:
              type: object
              nullable: true
              example: null

    ValidationError:
      type: object
      properties:
        field:
          type: string
          description: Field name that failed validation
          example: "email"
        message:
          type: string
          description: Validation error message
          example: "email is not valid"

    AccountResponse:
      type: object
      required:
        - id
        - user_id
        - balance
        - currency
        - account_status
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Account UUID
          example: "550e8400-e29b-41d4-a716-446655440001"
        user_id:
          type: integer
          format: int64
          description: User ID who owns this account
          example: 67890
        balance:
          type: number
          format: decimal
          description: Current account balance
          example: 150000.00
        currency:
          type: string
          description: Account currency
          enum: [IDR, USD, EUR]
          default: "IDR"
          example: "IDR"
        account_status:
          type: string
          description: Account status
          enum: [ACTIVE, SUSPENDED, CLOSED]
          example: "ACTIVE"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2024-01-20T14:45:00Z"

    BalanceResponse:
      type: object
      required:
        - balance
        - currency
      properties:
        balance:
          type: number
          format: decimal
          description: Current balance
          example: 150000.00
        currency:
          type: string
          description: Balance currency
          example: "IDR"

    ExternalBalanceResponse:
      type: object
      required:
        - provider
        - balance
        - currency
        - account_number
        - last_updated
      properties:
        provider:
          type: string
          description: External e-wallet provider name
          enum: [gopay, shopeepay]
          example: "gopay"
        balance:
          type: number
          format: decimal
          description: Current balance from external provider
          example: 75000.00
        currency:
          type: string
          description: Balance currency
          example: "IDR"
        account_number:
          type: string
          description: Linked account number/phone number
          example: "081234567890"
        last_updated:
          type: string
          format: date-time
          description: Last time balance was updated from external provider
          example: "2024-01-20T16:30:00Z"

    TopupRequest:
      type: object
      required:
        - amount
        - payment_method
        - phone_number
      properties:
        amount:
          type: number
          format: decimal
          minimum: 1
          description: Amount to top up
          nullable: false
          example: 50000.00
        payment_method:
          type: string
          description: Payment method for top up
          nullable: false
          enum: [GOPAY, SHOPEE_PAY]
          example: "GOPAY"
        phone_number:
          type: string
          maxLength: 20
          nullable: false
          description: |
            Phone number for e-wallet payment. Use Indonesian format (081234567890).
          example: "085987654321"
          pattern: '^08[0-9]{8,11}$'
        description:
          type: string
          maxLength: 255
          nullable: true
          description: Optional transaction description
          example: "Top up via GoPay"

    TransactionResponse:
      type: object
      required:
        - id
        - transaction_id
        - transaction_type
        - transaction_status
        - amount
        - balance_before
        - balance_after
        - currency
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Transaction UUID
          example: "650e8400-e29b-41d4-a716-446655440001"
        transaction_id:
          type: string
          description: Unique transaction reference
          example: "TXN-20240120-001"
        transaction_type:
          type: string
          description: Type of transaction
          enum: [TOPUP, PAYMENT, REFUND, TRANSFER]
          example: "TOPUP"
        transaction_status:
          type: string
          description: Current status of transaction
          enum: [PENDING, SUCCESS, FAILED, CANCELLED]
          example: "PENDING"
        amount:
          type: number
          format: decimal
          description: Transaction amount
          example: 50000.00
        balance_before:
          type: number
          format: decimal
          description: Account balance before transaction
          example: 100000.00
        balance_after:
          type: number
          format: decimal
          description: Account balance after transaction
          example: 150000.00
        currency:
          type: string
          description: Transaction currency
          example: "IDR"
        payment_method:
          type: string
          description: Payment method used
          enum: [GOPAY, SHOPEE_PAY]
          example: "GOPAY"
        description:
          type: string
          description: Transaction description
          example: "Top up via GoPay"
        created_at:
          type: string
          format: date-time
          description: Transaction creation timestamp
          example: "2024-01-20T15:30:00Z"

    TransactionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/TransactionResponse'
        - type: object
          properties:
            user_id:
              type: integer
              format: int64
              description: User ID who performed the transaction
              example: 67890
            account_id:
              type: string
              format: uuid
              description: Account UUID involved in the transaction
              example: "550e8400-e29b-41d4-a716-446655440001"
            external_reference:
              type: string
              nullable: true
              description: External system reference
              example: "GOPAY-REF-123456"
            metadata:
              type: string
              nullable: true
              description: Additional transaction data as JSON string
              example: "{\"provider\": \"gopay\", \"reference\": \"GP123456\"}"
            is_accessible_external:
              type: boolean
              description: Whether transaction is accessible to external services
              default: true
              example: true
            updated_at:
              type: string
              format: date-time
              description: Transaction last update timestamp
              example: "2024-01-20T15:31:00Z"

    TransactionPageResponse:
      type: object
      required:
        - content
        - pagination
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
          description: List of transactions
        pagination:
          $ref: '#/components/schemas/PaginationResponse'

    PaginationResponse:
      type: object
      required:
        - page
        - size
        - total_elements
        - total_pages
        - first
        - last
      properties:
        page:
          type: integer
          description: Current page number (0-based)
          example: 0
        size:
          type: integer
          description: Number of items per page
          example: 20
        total_elements:
          type: integer
          format: int64
          description: Total number of elements
          example: 1
        total_pages:
          type: integer
          description: Total number of pages
          example: 1
        first:
          type: boolean
          description: Whether this is the first page
          example: true
        last:
          type: boolean
          description: Whether this is the last page
          example: true

  responses:
    BadRequest:
      description: Bad request - validation errors
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/WebResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
          examples:
            validation_error:
              summary: Validation errors
              value:
                meta:
                  code: "400"
                  message: "Validation failed"
                data:
                  - field: "email"
                    message: "email is not valid"
                  - field: "password"
                    message: "password cannot be blank"
                  - field: "phone"
                    message: "phone number format is invalid"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing_token:
              summary: Missing authentication token
              value:
                meta:
                  code: "401"
                  message: "authentication required"
                data: null
            invalid_token:
              summary: Invalid authentication token
              value:
                meta:
                  code: "401"
                  message: "invalid or expired token"
                data: null
            invalid_api_key:
              summary: Invalid API key
              value:
                meta:
                  code: "401"
                  message: "invalid API key"
                data: null
            rate_limit_exceeded:
              summary: Rate limit exceeded
              value:
                meta:
                  code: "429"
                  message: "rate limit exceeded"
                data: null

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            server_error:
              summary: Internal server error
              value:
                meta:
                  code: "500"
                  message: "Internal server error"
                data: null

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT access token authentication.
        
        Include the access token in the Authorization header:
        `Authorization: Bearer <access_token>`

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key authentication for external services.
        
        Include your API key in the X-API-Key header:
        `X-API-Key: <your_api_key>`
        
        Rate limits apply based on your API key configuration:
        - Check response headers for rate limit information
        - Different keys may have different rate limits per second/minute/hour/day

security:
  - BearerAuth: []